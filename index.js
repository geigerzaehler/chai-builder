// Generated by CoffeeScript 1.8.0
(function() {
  var __slice = [].slice;

  (function(global, factory) {
    if (typeof module === 'object' && typeof require === 'function') {
      return module.exports = factory();
    } else {
      return factory();
    }
  })(this, function(chai) {
    var chain, each, use;
    use = function(chai, utils) {
      var Assertion, chaiProperties, expectationProto, testExpectation;
      Assertion = chai.Assertion;
      chaiProperties = Object.getOwnPropertyNames(Assertion.prototype);
      expectationProto = Object.create(null);
      each(chaiProperties, function(name) {
        return Object.defineProperty(expectationProto, name, {
          get: chain(name)
        });
      });
      testExpectation = function(target, expectation) {
        var assertion, callArgs, name, prop, propertyChain, receiver, _results;
        propertyChain = expectation._chain.slice();
        assertion = new Assertion(target);
        _results = [];
        while (prop = propertyChain.pop()) {
          name = prop.name, callArgs = prop.callArgs;
          receiver = assertion;
          assertion = assertion[name];
          if (callArgs) {
            _results.push(assertion = assertion.apply(receiver, callArgs));
          } else {
            _results.push(void 0);
          }
        }
        return _results;
      };
      expectationProto.test = function(target) {
        return testExpectation(target, this);
      };
      chai.should = Object.create(expectationProto);
      return chai.should.label = 'should';
    };
    chain = function(name) {
      return function() {
        var next;
        next = function() {
          var args;
          args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
          next._chain[0].callArgs = args;
          next.label += ' ' + args.join(' ');
          return next;
        };
        next.__proto__ = Object.create(this);
        next._chain = (this._chain || []).slice();
        next._chain.unshift({
          name: name
        });
        next.label += ' ' + name;
        return next;
      };
    };
    each = function(array, iterator) {
      var val, _i, _len, _results;
      _results = [];
      for (_i = 0, _len = array.length; _i < _len; _i++) {
        val = array[_i];
        _results.push(iterator(val));
      }
      return _results;
    };
    return use;
  });

}).call(this);
