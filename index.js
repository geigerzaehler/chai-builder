// Generated by CoffeeScript 1.8.0
(function() {
  var __slice = [].slice;

  (function(global, factory) {
    if (typeof module === 'object' && typeof require === 'function') {
      module.exports = factory();
    }
    if (typeof define === 'function' && define.amd) {
      return define(factory);
    } else {
      return global.mochaBuilder = factory();
    }
  })(this, function(chai) {
    var use;
    return use = function(chai, utils) {
      var Assertion, Expectation, assertionChainableMethods, assertionPropertyNames, chainCall, chainProperty;
      Assertion = chai.Assertion;
      Expectation = (function() {
        function Expectation() {
          this.label = 'should';
          this._chain = [];
        }

        Expectation.prototype.test = function(target) {
          var assertion, callArgs, name, prop, propertyChain, receiver, _results;
          propertyChain = this._chain.slice();
          assertion = new Assertion(target);
          _results = [];
          while (prop = propertyChain.pop()) {
            name = prop.name, callArgs = prop.callArgs;
            receiver = assertion;
            assertion = assertion[name];
            if (callArgs) {
              _results.push(assertion = assertion.apply(receiver, callArgs));
            } else {
              _results.push(void 0);
            }
          }
          return _results;
        };

        return Expectation;

      })();
      assertionPropertyNames = Object.getOwnPropertyNames(Assertion.prototype);
      assertionChainableMethods = Object.keys(Assertion.prototype.__methods);
      assertionPropertyNames.forEach(function(name) {
        var descriptor;
        if (assertionChainableMethods.indexOf(name) >= 0) {
          Object.defineProperty(Expectation.prototype, name, {
            get: function() {
              var next;
              next = function() {
                var callArgs;
                callArgs = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
                return chainCall(this, name, callArgs);
              };
              next.__proto__ = chainProperty(this, name);
              return next;
            }
          });
          return;
        }
        descriptor = Object.getOwnPropertyDescriptor(Assertion.prototype, name);
        if (typeof descriptor.value === 'function') {
          return Expectation.prototype[name] = function() {
            var callArgs;
            callArgs = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
            return chainCall(this, name, callArgs);
          };
        } else if (typeof descriptor.get === 'function') {
          return Object.defineProperty(Expectation.prototype, name, {
            get: function() {
              return chainProperty(this, name);
            }
          });
        }
      });
      chai.should = new Expectation;
      chai.Expectation = Expectation;
      chainProperty = function(base, name) {
        var next;
        next = new Expectation;
        next._chain = base._chain.slice();
        next._chain.unshift({
          name: name
        });
        next.label = base.label + ' ' + name;
        return next;
      };
      return chainCall = function(base, methodName, callArgs) {
        var next;
        next = new Expectation;
        next._chain = base._chain.slice();
        next._chain.unshift({
          name: methodName,
          callArgs: callArgs
        });
        next.label = base.label + ' ' + methodName + ' ' + callArgs.join(' ');
        return next;
      };
    };
  });

}).call(this);
